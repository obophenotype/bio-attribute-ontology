{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OBA - The Ontology of Biological Attributes","text":"<p>The Ontology of Biological Attributes is a tool for data integration. It aims to help researchers find new insights.</p> <p>Welcome to the OBA online documentation!</p>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>GitHub Repository</li> <li>Issue tracker</li> <li>OBO Library Homepage</li> <li>Editors guide</li> <li>How to cite OBA</li> </ul> <p>You can find descriptions of the standard ontology engineering workflows (ODK) here.</p>"},{"location":"cite/","title":"How to cite OBA","text":"<p>Please cite </p> <pre><code>Stefancsik R, Balhoff JP, Balk MA, Ball RL, Bello SM, Caron AR, Chesler EJ, de\nSouza V, Gehrke S, Haendel M, Harris LW, Harris NL, Ibrahim A, Koehler S,\nMatentzoglu N, McMurry JA, Mungall CJ, Munoz-Torres MC, Putman T, Robinson P,\nSmedley D, Sollis E, Thessen AE, Vasilevsky N, Walton DO, Osumi-Sutherland D.\nThe Ontology of Biological Attributes (OBA)-computational traits for the life sciences.\nMamm Genome. 2023 Apr.\n</code></pre> <p>doi:10.1007/s00335-023-09992-1 PMID: 37076585</p> <p>See also Zenodo.</p>"},{"location":"contributing/","title":"How to contribute to OBA","text":"<p>See https://github.com/obophenotype/bio-attribute-ontology/blob/master/CONTRIBUTING.md.</p>"},{"location":"editors-guide/","title":"Local development workflows with OBA","text":""},{"location":"editors-guide/#edit-files","title":"Edit files","text":"<p>There are three kinds of files to edit in OBO explained in the following:</p> <ul> <li>The normal OBA edit file (<code>src/ontology/obo-edit.obo</code>)</li> <li>The OBA SSSOM mappings (<code>src/mappings/*</code>)</li> <li>The OBA DOSDP pattern files (<code>src/patterns/data/default/*</code>)</li> </ul>"},{"location":"editors-guide/#the-oba-edit-file","title":"The OBA edit file","text":"<p>As opposed to other ontologies, the OBA edit file (<code>src/ontology/obo-edit.obo</code>) is barely used. Power curators will use the oba-edit.obo file occasionally to edit the class hierarchy, but as per OBA principles, the class hierarchy is mostly created by reasoning. Most of OBA editing happens by editing the DOSDP templates, see below.</p>"},{"location":"editors-guide/#the-oba-sssom-mappings","title":"The OBA SSSOM mappings","text":"<ul> <li>OBA-VT SSSOM Mapping: The official mappings between OBA and VT. Source of truth is on Google Sheets, not Github.</li> <li>OBA-EFO SSSOM Mapping: The official mappings between OBA and EFO. Source of truth is on Google Sheets, not Github.</li> <li>OBA-EFO Excluded Mapping: Terms from EFO that have been reviewed and deemed out of scope for OBA. Source of truth is on Google Sheets, not Github.</li> <li>OBA-VT Excluded Mapping: Terms from EFO that have been reviewed and deemed out of scope for OBA. Source of truth is on Google Sheets, not Github.</li> </ul>"},{"location":"editors-guide/#the-oba-dosdp-patterns","title":"The OBA DOSDP patterns","text":"<p>All OBA DOSDP data tables can be found here.</p> <p>DOSDP tables are the main way to edit OBA. You can edit the DOSDP TSV files using a regular text editor or a spreadsheet editor.</p> <p>The main rule is, make sure to review the diff before making a pull request - the diff should only show the things you have actually changed.</p>"},{"location":"editors-guide/#updating-sssom-mapping-files","title":"Updating SSSOM mapping files","text":"<pre><code>cd src/ontology\nsh run.sh make sync_sssom_google_sheets\n</code></pre>"},{"location":"editors-guide/#creatingupdating-terms","title":"Creating/updating terms","text":""},{"location":"editors-guide/#preparing-alignment-work","title":"Preparing alignment work","text":"<ol> <li>Update the data required for the alignment: <code>sh run.sh make prepare_oba_alignment -B</code>. This will take a while, as a lot of ontologies are downloaded and syncronised.</li> <li>Start jupyter in your local environment</li> <li>Open <code>src/scripts/oba_alignment.ipynb</code> in your Jupyter environment and run all over night.</li> <li>While the above is running, read everything in the notebook carefully to get a sense what the notebook is doing. The methods section can be skipped during the first read through, but it will likely be necessary to review these in later stages of the alignment process.</li> <li>The notebook run will produce the following files:<ul> <li><code>src/mappings/oba-vt-unreviewed.sssom.tsv</code>: VT mappings identified by pipeline but not reviewed</li> <li><code>src/mappings/oba-vt-missed.sssom.tsv</code>: VT mappings identified by looking at OBA IRIs (no need for review)</li> <li><code>src/mappings/oba-vt-unmapped.sssom.tsv</code>: VT terms that have not been mapped so far (excluding reviewed and candidate mappings)</li> <li><code>src/mappings/oba-vt-unreviewed.dosdp.tsv</code>: VT terms with candidate DOSDP pattern fillings.</li> <li><code>src/mappings/oba-efo-unreviewed.sssom.tsv</code>: see above vt analog</li> <li><code>src/mappings/oba-efo-unmapped.sssom.tsv</code>: see above vt analog</li> <li><code>src/mappings/oba-efo-unreviewed.dosdp.tsv</code>: see above vt analog</li> </ul> </li> </ol>"},{"location":"editors-guide/#curating-efo-alignment","title":"Curating EFO alignment","text":"<ol> <li>Follow the steps in the preparing alignment workflow</li> <li>The central pieces for the EFO alignment, if of interest, can be found in the section starting with <code>OBA-EFO Alignment</code> in <code>src/scripts/oba_alignment.ipynb</code>.</li> <li>Review <code>src/mappings/oba-efo-unreviewed.sssom.tsv</code>. These are the new mapping suggestions as determined by the mapping pipeline. Review mappings 1 x 1 and copy them into the official EFO-OBA SSSOM mapping curated on Google Sheets.</li> <li>Review <code>src/mappings/oba-efo-unreviewed.dosdp.tsv</code>. This is the hardest part. The table only provides a handful of suggests on how to map the label using DOSDP. You will have to go through the table <code>subject_id</code> by <code>subject_id</code> and identify the correct corresponding DOSDP pattern tables. Important: when you create an ID (<code>defined_class</code> column DOSDP table) for an EFO-sourced class, you have to add a respective mapping to the official EFO-OBA SSSOM mapping curated on Google Sheets.</li> <li>Optional: Review <code>src/mappings/oba-efo-unmapped.sssom.tsv</code> to figure out what to do about entirely unmapped EFO terms. These may need some careful planning and adjustments of the alignment code.</li> </ol>"},{"location":"editors-guide/#curating-vt-alignment","title":"Curating VT alignment","text":"<ol> <li>Follow the steps in the preparing alignment workflow</li> <li>The central pieces for the EFO alignment, if of interest, can be found in the section starting with <code>OBA-VT Alignment</code> in <code>src/scripts/oba_alignment.ipynb</code>.</li> <li>Review <code>src/mappings/oba-vt-missed.sssom.tsv</code>. This should ideally be empty - these are mappings that have not been factored into the official oba-vt mappings yet, but have the VT-style IRI (<code>OBA:VT0010108</code>) which suggests that the class was derived from the respective VT id. Add all mappings in <code>oba-vt-missed.sssom.tsv</code> to the official VT-OBA SSSOM mapping curated on Google Sheets.</li> <li>Review <code>src/mappings/oba-vt-unreviewed.sssom.tsv</code>. These are the new mapping suggestions as determined by the mapping pipeline. Review mappings 1 x 1 and copy them into the official VT-OBA SSSOM mapping curated on Google Sheets.</li> <li>Review <code>src/mappings/oba-vt-unreviewed.dosdp.tsv</code>. This is the hardest part. The table only provides a handful of suggests on how to map the label using DOSDP. You will have to go through the table <code>subject_id</code> by <code>subject_id</code> and identify the correct corresponding DOSDP pattern tables. Important: when you create an ID (<code>defined_class</code> column DOSDP table) for a VT-sourced class, you add a special IRI that looks like <code>OBA:VT123</code>. This way, mappings will be curated automatically by the framework and you dont have to add them manually.</li> <li>Optional: Review <code>src/mappings/oba-vt-unmapped.sssom.tsv</code> to figure out what to do about entirely unmapped VT terms. These may need some careful planning and adjustments of the alignment code.</li> </ol>"},{"location":"editors-guide/#adding-measured-in-annotations","title":"Adding \"measured in\" annotations","text":"<ol> <li>Go to Google sheet for \"measured in\" annotations and add annotations</li> <li>Go to <code>cd src/ontology</code> in your terminal</li> <li>Create a new branch with your favourite tool</li> <li>Run <code>sh run.sh make sync_templates_google_sheets</code> to sync templates from Google sheets</li> <li>Convince yourself in your favourite git diff tool (GitHub Desktop!) that the changed tables look as intended!</li> <li>In your terminal, run <code>sh run.sh make recreate-measured_in</code></li> <li>When completed, the file <code>src/ontology/components/measured_in.owl</code> should have been updated. Look at the diff again to convince yourself that the changes look as intended. You may want to open <code>oba-edit.obo</code> in Protege to look at one or two changes!</li> <li>Make sure you are on your new branch created above and commit changes to branch.</li> <li>Publish branch (push to GitHub), make pull request, assign reviewer.</li> </ol>"},{"location":"editors-guide/#adding-synonym","title":"Adding synonym","text":"<ol> <li>Follow the instructions for adding \"measured in\" annotations above, except:</li> <li>Add the synonyms in this sheet here</li> <li>Instead of <code>sh run.sh make recreate-measured_in</code>, <code>sh run.sh make recreate-synonyms</code></li> </ol>"},{"location":"editors-guide/#importing-terms-and-updating-dosdp-patterns","title":"Importing terms and updating DOSDP patterns","text":"<p>When creating new OBA terms using DOSDP patterns for example the entity-attribute pattern, it may be necessary to import terms from other ontologies like CHEBI or PRO, the PRotein Ontology. However, CHEBI, NCBITAXON and PRO are too large to be managed easily as standard imports. To mitigate this situation, they can be managed as slims which are located here: * NCBITAXON: https://github.com/obophenotype/ncbitaxon/tree/master/subsets * PRO: https://github.com/obophenotype/pro_obo_slim * CHEBI: https://github.com/obophenotype/chebi_obo_slim</p> <p>Sometimes, a new term you are using in a DOSDP pattern is not yet in a slim. So you will have to refresh the slim first. </p>"},{"location":"editors-guide/#refresh-lipid-maps","title":"Refresh LIPID Maps","text":"<p>LIPID map is currently (03.06.2023) not imported, but curated manually, because https://www.lipidmaps.org/resources/sparql does not work. To update the LIPID maps imports, you have to</p> <ul> <li>Add a LIPID term to https://github.com/obophenotype/bio-attribute-ontology/blob/master/src/templates/external.tsv</li> <li>When refreshing the imports in the usual way, this TSV file (a ROBOT template) is built in place of a proper LIPID MAPS mirror.</li> </ul>"},{"location":"editors-guide/#refresh-pro-slim","title":"Refresh PRO Slim:","text":"<p>Note: you will need at least 32 GB RAM for this</p> <pre><code>git clone https://github.com/obophenotype/pro_obo_slim\ncd pro_obo_slim\ngit checkout -b refresh20230312\n# Add your terms to seed.txt, and then SORT THE FILE and check that there are no duplicated terms.\n# Make sure that DOCKER is running. To set up DOCKER refer to https://oboacademy.github.io/obook/howto/odk-setup/\nsh odk.sh make all\ngit commit -a -m \"refresh slim after adding terms for OBA\"\ngit push --set-upstream origin refresh20230312\n</code></pre> <p>When this is done, make a pull request.</p>"},{"location":"editors-guide/#refresh-chebi-slim","title":"Refresh CHEBI Slim","text":"<pre><code>git clone https://github.com/obophenotype/chebi_obo_slim\ncd chebi_obo_slim\n# Follow the instructions for the PRO slim from here.\n</code></pre> <p>The full process of refreshing the DOSDP patterns: 1.  Check if new PRO / Chebi terms are not in slim, if they are not, add them as described above. 2.  Run <code>sh run.sh make IMP=false MIR=false ../patterns/definitions.owl</code> to generate a new pattern ontology component. 3.  Run <code>sh run.sh make refresh-merged</code> to import the new terms. 4.  Run <code>sh run.sh make IMP=false MIR=false ../patterns/definitions.owl</code> again to generate the labels correctly where new terms are concerned.</p>"},{"location":"editors-guide/#obsoleting-terms-originating-from-dos-dp-templates","title":"Obsoleting terms originating from DOS-DP templates","text":"<ol> <li>Delete the row with the targeted term from the appropriate data table (<code>tsv</code> file) in folder: <code>src/patterns/data/default/</code></li> <li>Fill in the IRI of the term to be obsoleted in <code>src/templates/obsoletes.tsv</code> along with other relevant information. It is useful add a comment with an explanation for the obsoletion. Start the comment with '<code>Reason for obsoletion:</code>'.</li> <li>Re-create the DOS-DP axioms by running</li> </ol> <pre><code>cd PATH-TO/bio-attribute-ontology/src/ontology\nsh run.sh make ../patterns/definitions.owl\nsh run.sh make components/obsoletes.owl\n</code></pre>"},{"location":"history/","title":"A brief history of OBA","text":"<p>The following page gives an overview of the history of OBA.</p> <p>TBD.</p>"},{"location":"metrics/","title":"Metrics","text":"<p>There are currently two sets of metrics of this ontology:</p> <ul> <li>ROBOT metrics</li> <li>ROBOT metrics</li> </ul>"},{"location":"oak-metrics/","title":"Metrics for OBA (based on OAK)","text":"<p>Ontologies: </p> <ul> <li>obo:oba/oba-baseplus.owl (obo:oba/releases/2023-01-23/oba-baseplus.owl)</li> </ul> <p>The raw data (ontology metrics) can be found on GitHub.</p>"},{"location":"oba-gwas-sop/","title":"How to add new GWAS requested trait terms to OBA and EFO?","text":""},{"location":"oba-gwas-sop/#1-check-if-an-appropriate-oba-trait-pattern-already-exists","title":"1. Check if an appropriate OBA trait pattern already exists","text":"<p>Look into bio-attribute-ontology/src/patterns/dosdp-patterns/ and check if the GWAS trait term would fit into any of the existing patterns. - [ ] If yes, skip to the next step. - [ ] If none of the existing OBA trait patterns look appropriate, then create a new pattern. In some cases, the requested GWAS term may not fit the scope of OBA. In that case, an new EFO term can be created without an equivalent OBA trait term.</p>"},{"location":"oba-gwas-sop/#2-create-new-oba-terms","title":"2. Create new OBA term(s)","text":"<ul> <li> <p>Create a new github branch for the edits.</p> </li> <li> <p>Fill in the appropriate DOS-DP template data table to add any new terms to OBA in bio-attribute-ontology/src/patterns/data/default/.</p> </li> </ul> <p>For example, for a trait involving the 'age at which disease manifestations first appear', fill in the table <code>disease_onset.tsv</code>.. Create a unique OBA identifier by using the next available ID from your assigned range.</p> <p>Also fill in the appropriate columns for the variable fields as specified in the actual DOS-DP <code>yaml</code> template file. For example, in the case of the <code>disease_onset.tsv</code>. table, you must use MONDO disease or disorder terms in the <code>disease</code> column.</p> <p>NOTE: Keep track of the IDs from your range that you have already assigned.</p> <ul> <li>Create a pull request (PR) with the edits. Request other people to review your PR.</li> <li>If approved, merge the PR after the review(s) into the 'master' branch. </li> </ul>"},{"location":"oba-gwas-sop/#3-oba-release","title":"3. OBA release","text":"<p>The newly created trait terms can be imported into EFO from a publicly released version of OBA.</p> <p>To run the OBA release pipeline, follow the instructions in the document Release Workflow for the Ontology of Biological Attributes (OBA).</p>"},{"location":"oba-gwas-sop/#4-provide-the-new-oba-terms-to-efo","title":"4. Provide the new OBA terms to EFO","text":"<ul> <li> <p>[ ] Add the newly created OBA term IRI and also all its component term IRIs to oba_terms.txt so that they get included in EFO dynamic imports. By component terms I mean all those terms that are used in the DOS-DP data filler table to compose the OBA term (terms from MONDO, UBERON, PATO, etc.) as specified in the corresponding DOS-DP pattern file.</p> <ul> <li>NOTE: use full IRI, i.e:</li> </ul> <p><code>http://purl.obolibrary.org/obo/OBA_2040167 http://purl.obolibrary.org/obo/MONDO_0000481</code></p> </li> <li> <p>[ ] This step depends on a new public OBA release.</p> </li> <li>[ ] You need to accomplish this in an EFO PR.</li> </ul>"},{"location":"oba-release-sop/","title":"Release Workflow for the Ontology of Biological Attributes (OBA)","text":"<p>See the OBA-specific ODK release workflow document.</p>"},{"location":"robot-metrics/","title":"Metrics OBA/OBA-BASEPLUS","text":"<p>IRI: http://purl.obolibrary.org/obo/oba/oba-baseplus.owl</p> <p>Version IRI: http://purl.obolibrary.org/obo/oba/releases/2023-01-23/oba-baseplus.owl</p>"},{"location":"robot-metrics/#entities-and-axioms","title":"Entities and axioms","text":"Metric Value Annotation properties 25 Axioms 66080 Logical axioms 29270 Classes 11947 Object properties 6 Data properties 0 Individuals 0"},{"location":"robot-metrics/#expressivity","title":"Expressivity","text":"Metric Value Expressivity ALE OWL2 True OWL2 DL False OWL2 EL False OWL2 QL False OWL2 RL False"},{"location":"robot-metrics/#axiom-types","title":"Axiom types","text":"Metric Value AnnotationAssertion 24843 EquivalentClasses 7769 Declaration 11967 SubClassOf 21501"},{"location":"robot-metrics/#entity-namespaces-axiom-counts-by-namespace","title":"Entity namespaces: axiom counts by namespace","text":"Metric Value PR 69 oboInOwl 12 owl 2 GO 708 HP 1 xsd 2 CL 346 PATO 139 BFO 2 rdfs 2 OBA 7854 dc11 4 MONDO 40 CHEBI 302 IAO 3 UBERON 2369 NBO 109 SO 4 RO 4 PO 6 dc 2"},{"location":"robot-metrics/#class-expressions-used","title":"Class expressions used","text":"Metric Value Class 79152 ObjectSomeValuesFrom 15797 ObjectIntersectionOf 8683 <p>The raw data (ontology metrics) can be found on GitHub.</p>"},{"location":"odk-workflows/","title":"Default ODK Workflows","text":"<ul> <li>Daily Editors Workflow</li> <li>Release Workflow</li> <li>Manage your ODK Repository</li> <li>Setting up Docker for ODK</li> <li>Imports management</li> <li>Managing the documentation</li> <li>Managing your Automated Testing</li> </ul>"},{"location":"odk-workflows/ContinuousIntegration/","title":"Introduction to Continuous Integration Workflows with ODK","text":"<p>Historically, most repos have been using Travis CI for continuous integration testing and building, but due to runtime restrictions, we recently switched a lot of our repos to GitHub actions. You can set up your repo with CI by adding  this to your configuration file (src/ontology/oba-odk.yaml):</p> <pre><code>ci:\n  - github_actions\n</code></pre> <p>When updateing your repo, you will notice a new file being added: <code>.github/workflows/qc.yml</code>.</p> <p>This file contains your CI logic, so if you need to change, or add anything, this is the place!</p> <p>Alternatively, if your repo is in GitLab instead of GitHub, you can set up your repo with GitLab CI by adding  this to your configuration file (src/ontology/oba-odk.yaml):</p> <pre><code>ci:\n  - gitlab-ci\n</code></pre> <p>This will add a file called <code>.gitlab-ci.yml</code> in the root of your repo.</p>"},{"location":"odk-workflows/EditorsWorkflow/","title":"Editors Workflow","text":"<p>The editors workflow is one of the formal workflows to ensure that the ontology is developed correctly according to ontology engineering principles. There are a few different editors workflows:</p> <ol> <li>Local editing workflow: Editing the ontology in your local environment by hand, using tools such as Prot\u00e9g\u00e9, ROBOT templates or DOSDP patterns.</li> <li>Completely automated data pipeline (GitHub Actions)</li> <li>DROID workflow</li> </ol> <p>This document only covers the first editing workflow, but more will be added in the future</p>"},{"location":"odk-workflows/EditorsWorkflow/#local-editing-workflow","title":"Local editing workflow","text":"<p>Workflow requirements:</p> <ul> <li>git</li> <li>github</li> <li>docker</li> <li>editing tool of choice, e.g. Prot\u00e9g\u00e9, your favourite text editor, etc</li> </ul>"},{"location":"odk-workflows/EditorsWorkflow/#1-create-issue","title":"1. Create issue","text":"<p>Ensure that there is a ticket on your issue tracker that describes the change you are about to make. While this seems optional, this is a very important part of the social contract of building an ontology - no change to the ontology should be performed without a good ticket, describing the motivation and nature of the intended change.</p>"},{"location":"odk-workflows/EditorsWorkflow/#2-update-main-branch","title":"2. Update main branch","text":"<p>In your local environment (e.g. your laptop), make sure you are on the <code>main</code> (prev. <code>master</code>) branch and ensure that you have all the upstream changes, for example:</p> <pre><code>git checkout master\ngit pull\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#3-create-feature-branch","title":"3. Create feature branch","text":"<p>Create a new branch. Per convention, we try to use meaningful branch names such as: - issue23removeprocess (where issue 23 is the related issue on GitHub) - issue26addcontributor - release20210101 (for releases)</p> <p>On your command line, this looks like this:</p> <pre><code>git checkout -b issue23removeprocess\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#4-perform-edit","title":"4. Perform edit","text":"<p>Using your editor of choice, perform the intended edit. For example:</p> <p>Prot\u00e9g\u00e9</p> <ol> <li>Open <code>src/ontology/oba-edit.owl</code> in Prot\u00e9g\u00e9</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>TextEdit</p> <ol> <li>Open <code>src/ontology/oba-edit.owl</code> in TextEdit (or Sublime, Atom, Vim, Nano)</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>Consider the following when making the edit.</p> <ol> <li>According to our development philosophy, the only places that should be manually edited are:<ul> <li><code>src/ontology/oba-edit.owl</code></li> <li>Any ROBOT templates you chose to use (the TSV files only)</li> <li>Any DOSDP data tables you chose to use (the TSV files, and potentially the associated patterns)</li> <li>components (anything in <code>src/ontology/components</code>), see here.</li> </ul> </li> <li>Imports should not be edited (any edits will be flushed out with the next update). However, refreshing imports is a potentially breaking change - and is discussed elsewhere.</li> <li>Changes should usually be small. Adding or changing 1 term is great. Adding or changing 10 related terms is ok. Adding or changing 100 or more terms at once should be considered very carefully.</li> </ol>"},{"location":"odk-workflows/EditorsWorkflow/#4-check-the-git-diff","title":"4. Check the Git diff","text":"<p>This step is very important. Rather than simply trusting your change had the intended effect, we should always use a git diff as a first pass for sanity checking.</p> <p>In our experience, having a visual git client like GitHub Desktop or sourcetree is really helpful for this part. In case you prefer the command line:</p> <pre><code>git status\ngit diff\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#5-quality-control","title":"5. Quality control","text":"<p>Now it's time to run your quality control checks. This can either happen locally (5a) or through your continuous integration system (7/5b).</p>"},{"location":"odk-workflows/EditorsWorkflow/#5a-local-testing","title":"5a. Local testing","text":"<p>If you chose to run your test locally:</p> <pre><code>sh run.sh make IMP=false test\n</code></pre> <p>This will run the whole set of configured ODK tests on including your change. If you have a complex DOSDP pattern pipeline you may want to add <code>PAT=false</code> to skip the potentially lengthy process of rebuilding the patterns.</p> <pre><code>sh run.sh make IMP=false PAT=false test\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#6-pull-request","title":"6. Pull request","text":"<p>When you are happy with the changes, you commit your changes to your feature branch, push them upstream (to GitHub) and create a pull request. For example:</p> <pre><code>git add NAMEOFCHANGEDFILES\ngit commit -m \"Added biological process term #12\"\ngit push -u origin issue23removeprocess\n</code></pre> <p>Then you go to your project on GitHub, and create a new pull request from the branch, for example: https://github.com/INCATools/ontology-development-kit/pulls</p> <p>There is a lot of great advise on how to write pull requests, but at the very least you should: - mention the tickets affected: <code>see #23</code> to link to a related ticket, or <code>fixes #23</code> if, by merging this pull request, the ticket is fixed. Tickets in the latter case will be closed automatically by GitHub when the pull request is merged. - summarise the changes in a few sentences. Consider the reviewer: what would they want to know right away. - If the diff is large, provide instructions on how to review the pull request best (sometimes, there are many changed files, but only one important change).</p>"},{"location":"odk-workflows/EditorsWorkflow/#75b-continuous-integration-testing","title":"7/5b. Continuous Integration Testing","text":"<p>If you didn't run and local quality control checks (see 5a), you should have Continuous Integration (CI) set up, for example: - Travis - GitHub Actions</p> <p>More on how to set this up here. Once the pull request is created, the CI will automatically trigger. If all is fine, it will show up green, otherwise red.</p>"},{"location":"odk-workflows/EditorsWorkflow/#8-community-review","title":"8. Community review","text":"<p>Once all the automatic tests have passed, it is important to put a second set of eyes on the pull request. Ontologies are inherently social - as in that they represent some kind of community consensus on how a domain is organised conceptually. This seems high brow talk, but it is very important that as an ontology editor, you have your work validated by the community you are trying to serve (e.g. your colleagues, other contributors etc.). In our experience, it is hard to get more than one review on a pull request - two is great. You can set up GitHub branch protection to actually require a review before a pull request can be merged! We recommend this.</p> <p>This step seems daunting to some hopefully under-resourced ontologies, but we recommend to put this high up on your list of priorities - train a colleague, reach out!</p>"},{"location":"odk-workflows/EditorsWorkflow/#9-merge-and-cleanup","title":"9. Merge and cleanup","text":"<p>When the QC is green and the reviews are in (approvals), it is time to merge the pull request. After the pull request is merged, remember to delete the branch as well (this option will show up as a big button right after you have merged the pull request). If you have not done so, close all the associated tickets fixed by the pull request.</p>"},{"location":"odk-workflows/EditorsWorkflow/#10-changelog-optional","title":"10. Changelog (Optional)","text":"<p>It is sometimes difficult to keep track of changes made to an ontology. Some ontology teams opt to document changes in a changelog (simply a text file in your repository) so that when release day comes, you know everything you have changed. This is advisable at least for major changes (such as a new release system, a new pattern or template etc.).</p>"},{"location":"odk-workflows/ManageAutomatedTest/","title":"ManageAutomatedTest","text":""},{"location":"odk-workflows/ManageAutomatedTest/#constraint-violation-checks","title":"Constraint violation checks","text":"<p>We can define custom checks using SPARQL. SPARQL queries define bad modelling patterns (missing labels, misspelt URIs, and many more) in the ontology. If these queries return any results, then the build will fail. Custom checks are designed to be run as part of GitHub Actions Continuous Integration testing, but they can also run locally.</p>"},{"location":"odk-workflows/ManageAutomatedTest/#steps-to-add-a-constraint-violation-check","title":"Steps to add a constraint violation check:","text":"<ol> <li>Add the SPARQL query in <code>src/sparql</code>. The name of the file should end with <code>-violation.sparql</code>. Please give a name that helps to understand which violation the query wants to check.</li> <li>Add the name of the new file to odk configuration file <code>src/ontology/uberon-odk.yaml</code>:<ol> <li>Include the name of the file (without the <code>-violation.sparql</code> part) to the list inside the key <code>custom_sparql_checks</code> that is inside <code>robot_report</code> key.</li> <li> <p>If the <code>robot_report</code> or <code>custom_sparql_checks</code> keys are not available, please add this code block to the end of the file.</p> <p><code>yaml   robot_report:     release_reports: False     fail_on: ERROR     use_labels: False     custom_profile: True     report_on:       - edit     custom_sparql_checks:       - name-of-the-file-check</code> 3. Update the repository so your new SPARQL check will be included in the QC.</p> </li> </ol> </li> </ol> <pre><code>sh run.sh make update_repo\n</code></pre>"},{"location":"odk-workflows/ManageDocumentation/","title":"Updating the Documentation","text":"<p>The documentation for OBA is managed in two places (relative to the repository root):</p> <ol> <li>The <code>docs</code> directory contains all the files that pertain to the content of the documentation (more below)</li> <li>the <code>mkdocs.yaml</code> file contains the documentation config, in particular its navigation bar and theme.</li> </ol> <p>The documentation is hosted using GitHub pages, on a special branch of the repository (called <code>gh-pages</code>). It is important that this branch is never deleted - it contains all the files GitHub pages needs to render and deploy the site. It is also important to note that the gh-pages branch should never be edited manually. All changes to the docs happen inside the <code>docs</code> directory on the <code>main</code> branch.</p>"},{"location":"odk-workflows/ManageDocumentation/#editing-the-docs","title":"Editing the docs","text":""},{"location":"odk-workflows/ManageDocumentation/#changing-content","title":"Changing content","text":"<p>All the documentation is contained in the <code>docs</code> directory, and is managed in Markdown. Markdown is a very simple and convenient way to produce text documents with formatting instructions, and is very easy to learn - it is also used, for example, in GitHub issues. This is a normal editing workflow:</p> <ol> <li>Open the <code>.md</code> file you want to change in an editor of choice (a simple text editor is often best). IMPORTANT: Do not edit any files in the <code>docs/odk-workflows/</code> directory. These files are managed by the ODK system and will be overwritten when the repository is upgraded! If you wish to change these files, make an issue on the ODK issue tracker.</li> <li>Perform the edit and save the file</li> <li>Commit the file to a branch, and create a pull request as usual. </li> <li>If your development team likes your changes, merge the docs into master branch.</li> <li>Deploy the documentation (see below)</li> </ol>"},{"location":"odk-workflows/ManageDocumentation/#deploy-the-documentation","title":"Deploy the documentation","text":"<p>The documentation is not automatically updated from the Markdown, and needs to be deployed deliberately. To do this, perform the following steps:</p> <ol> <li>In your terminal, navigate to the edit directory of your ontology, e.g.:    <code>cd oba/src/ontology</code></li> <li>Now you are ready to build the docs as follows:    <code>sh run.sh make update_docs</code> Mkdocs now sets off to build the site from the markdown pages. You will be asked to<ul> <li>Enter your username</li> <li>Enter your password (see here for using GitHub access tokens instead)   IMPORTANT: Using password based authentication will be deprecated this year (2021). Make sure you read up on personal access tokens if that happens!</li> </ul> </li> </ol> <p>If everything was successful, you will see a message similar to this one:</p> <p><code>INFO    -  Your documentation should shortly be available at: https://obophenotype.github.io/bio-attribute-ontology/</code> 3. Just to double check, you can now navigate to your documentation pages (usually https://obophenotype.github.io/bio-attribute-ontology/).     Just make sure you give GitHub 2-5 minutes to build the pages!</p>"},{"location":"odk-workflows/ReleaseWorkflow/","title":"The release workflow","text":"<p>The release workflow recommended by the ODK is based on GitHub releases and works as follows:</p> <ol> <li>Run a release with the ODK</li> <li>Review the release</li> <li>Merge to main branch</li> <li>Create a GitHub release</li> </ol> <p>These steps are outlined in detail in the following.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#run-a-release-with-the-odk","title":"Run a release with the ODK","text":"<p>Preparation:</p> <ol> <li>Ensure that all your pull requests are merged into your main (master) branch</li> <li>Make sure that all changes to master are committed to GitHub (<code>git status</code> should say that there are no modified files)</li> <li>Locally make sure you have the latest changes from master (<code>git pull</code>)</li> <li>Checkout a new branch (e.g. <code>git checkout -b release-2021-01-01</code>)</li> <li>You may or may not want to refresh your imports as part of your release strategy (see here)</li> <li>Make sure you have the latest ODK installed by running <code>docker pull obolibrary/odkfull</code></li> </ol> <p>To actually run the release, you:</p> <ol> <li>Open a command line terminal window and navigate to the src/ontology directory (<code>cd oba/src/ontology</code>)</li> <li>Run release pipeline:<code>sh run.sh make prepare_release -B</code>. Note that for some ontologies, this process can take up to 90 minutes - especially if there are large ontologies you depend on, like PRO or CHEBI.</li> <li>If everything went well, you should see the following output on your machine: <code>Release files are now in ../.. - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab</code>.</li> </ol> <p>This will create all the specified release targets (OBO, OWL, JSON, and the variants, ont-full and ont-base) and copy them into your release directory (the top level of your repo).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#review-the-release","title":"Review the release","text":"<ol> <li>(Optional) Rough check. This step is frequently skipped, but for the more paranoid among us (like the author of this doc), this is a 3 minute additional effort for some peace of mind. Open the main release (oba.owl) in you favourite development environment (i.e. Prot\u00e9g\u00e9) and eyeball the hierarchy. We recommend two simple checks: <ol> <li>Does the very top level of the hierarchy look ok? This means that all new terms have been imported/updated correctly.</li> <li>Does at least one change that you know should be in this release appear? For example, a new class. This means that the release was actually based on the recent edit file. </li> </ol> </li> <li>Commit your changes to the branch and make a pull request</li> <li>In your GitHub pull request, review the following three files in detail (based on our experience):<ol> <li><code>oba.obo</code> - this reflects a useful subset of the whole ontology (everything that can be covered by OBO format). OBO format has that speaking for it: it is very easy to review!</li> <li><code>oba-base.owl</code> - this reflects the asserted axioms in your ontology that you have actually edited.</li> <li>Ideally also take a look at <code>oba-full.owl</code>, which may reveal interesting new inferences you did not know about. Note that the diff of this file is sometimes quite large.</li> </ol> </li> <li>Like with every pull request, we recommend to always employ a second set of eyes when reviewing a PR!</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#merge-the-main-branch","title":"Merge the main branch","text":"<p>Once your CI checks have passed, and your reviews are completed, you can now merge the branch into your main branch (don't forget to delete the branch afterwards - a big button will appear after the merge is finished).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#create-a-github-release","title":"Create a GitHub release","text":"<ol> <li>Go to your releases page on GitHub by navigating to your repository, and then clicking on releases (usually on the right, for example: https://github.com/obophenotype/bio-attribute-ontology/releases). Then click \"Draft new release\"</li> <li>As the tag version you need to choose the date on which your ontologies were build. You can find this, for example, by looking at the <code>oba.obo</code> file and check the <code>data-version:</code> property. The date needs to be prefixed with a <code>v</code>, so, for example <code>v2020-02-06</code>.</li> <li>You can write whatever you want in the release title, but we typically write the date again. The description underneath should contain a concise list of changes or term additions.</li> <li>Click \"Publish release\". Done.</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#debugging-typical-ontology-release-problems","title":"Debugging typical ontology release problems","text":""},{"location":"odk-workflows/ReleaseWorkflow/#problems-with-memory","title":"Problems with memory","text":"<p>When you are dealing with large ontologies, you need a lot of memory. When you see error messages relating to large ontologies such as CHEBI, PRO, NCBITAXON, or Uberon, you should think of memory first, see here.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#problems-when-using-obo-format-based-tools","title":"Problems when using OBO format based tools","text":"<p>Sometimes you will get cryptic error messages when using legacy tools using OBO format, such as the ontology release tool (OORT), which is also available as part of the ODK docker container. In these cases, you need to track down what axiom or annotation actually caused the breakdown. In our experience (in about 60% of the cases) the problem lies with duplicate annotations (<code>def</code>, <code>comment</code>) which are illegal in OBO. Here is an example recipe of how to deal with such a problem:</p> <ol> <li>If you get a message like <code>make: *** [cl.Makefile:84: oort] Error 255</code> you might have a OORT error. </li> <li>To debug this, in your terminal enter <code>sh run.sh make IMP=false PAT=false oort -B</code> (assuming you are already in the ontology folder in your directory) </li> <li>This should show you where the error is in the log (eg multiple different definitions)  WARNING: THE FIX BELOW IS NOT IDEAL, YOU SHOULD ALWAYS TRY TO FIX UPSTREAM IF POSSIBLE</li> <li>Open <code>oba-edit.owl</code> in Prot\u00e9g\u00e9 and find the offending term and delete all offending issue (e.g. delete ALL definition, if the problem was \"multiple def tags not allowed\") and save.  *While this is not idea, as it will remove all definitions from that term, it will be added back again when the term is fixed in the ontology it was imported from and added back in.</li> <li>Rerun <code>sh run.sh make IMP=false PAT=false oort -B</code> and if it all passes, commit your changes to a branch and make a pull request as usual.</li> </ol>"},{"location":"odk-workflows/RepoManagement/","title":"Managing your ODK repository","text":""},{"location":"odk-workflows/RepoManagement/#updating-your-odk-repository","title":"Updating your ODK repository","text":"<p>Your ODK repositories configuration is managed in <code>src/ontology/oba-odk.yaml</code>. The ODK Project Configuration Schema defines all possible parameters that can be used in this config YAML. Once you have made your changes, you can run the following to apply your changes to the repository:</p> <pre><code>sh run.sh make update_repo\n</code></pre> <p>There are a large number of options that can be set to configure your ODK, but we will only discuss a few of them here.</p> <p>NOTE for Windows users:</p> <p>You may get a cryptic failure such as <code>Set Illegal Option -</code> if the update script located in <code>src/scripts/update_repo.sh</code>  was saved using Windows Line endings. These need to change to unix line endings. In Notepad++, for example, you can  click on Edit-&gt;EOL Conversion-&gt;Unix LF to change this.</p>"},{"location":"odk-workflows/RepoManagement/#managing-imports","title":"Managing imports","text":"<p>You can use the update repository workflow described on this page to perform the following operations to your imports:</p> <ol> <li>Add a new import</li> <li>Modify an existing import</li> <li>Remove an import you no longer want</li> <li>Customise an import</li> </ol> <p>We will discuss all these workflows in the following.</p>"},{"location":"odk-workflows/RepoManagement/#add-new-import","title":"Add new import","text":"<p>To add a new import, you first edit your odk config as described above, adding an <code>id</code> to the <code>product</code> list in the <code>import_group</code> section (for the sake of this example, we assume you already import RO, and your goal is to also import GO):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n</code></pre> <p>Note: our ODK file should only have one <code>import_group</code> which can contain multiple imports (in the <code>products</code> section). Next, you run the update repo workflow to apply these changes. Note that by default, this module is going to be a SLME Bottom module, see here. To change that or customise your module, see section \"Customise an import\". To finalise the addition of your import, perform the following steps:</p> <ol> <li>Add an import statement to your <code>src/ontology/oba-edit.owl</code> file. We suggest to do this using a text editor, by simply copying an existing import declaration and renaming it to the new ontology import, for example as follows:     <code>...     Ontology(&lt;http://purl.obolibrary.org/obo/oba.owl&gt;     Import(&lt;http://purl.obolibrary.org/obo/oba/imports/ro_import.owl&gt;)     Import(&lt;http://purl.obolibrary.org/obo/oba/imports/go_import.owl&gt;)     ...</code></li> <li>Add your imports redirect to your catalog file <code>src/ontology/catalog-v001.xml</code>, for example:     <code>&lt;uri name=\"http://purl.obolibrary.org/obo/oba/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;</code></li> <li>Test whether everything is in order:<ol> <li>Refresh your import</li> <li>Open in your Ontology Editor of choice (Protege) and ensure that the expected terms are imported.</li> </ol> </li> </ol> <p>Note: The catalog file <code>src/ontology/catalog-v001.xml</code> has one purpose: redirecting  imports from URLs to local files. For example, if you have</p> <pre><code>Import(&lt;http://purl.obolibrary.org/obo/oba/imports/go_import.owl&gt;)\n</code></pre> <p>in your editors file (the ontology) and</p> <pre><code>&lt;uri name=\"http://purl.obolibrary.org/obo/oba/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;\n</code></pre> <p>in your catalog, tools like <code>robot</code> or Prot\u00e9g\u00e9 will recognize the statement in the catalog file to redirect the URL <code>http://purl.obolibrary.org/obo/oba/imports/go_import.owl</code> to the local file <code>imports/go_import.owl</code> (which is in your <code>src/ontology</code> directory).</p>"},{"location":"odk-workflows/RepoManagement/#modify-an-existing-import","title":"Modify an existing import","text":"<p>If you simply wish to refresh your import in light of new terms, see here. If you wish to change the type of your module see section \"Customise an import\".</p>"},{"location":"odk-workflows/RepoManagement/#remove-an-existing-import","title":"Remove an existing import","text":"<p>To remove an existing import, perform the following steps:</p> <ol> <li>remove the import declaration from your <code>src/ontology/oba-edit.owl</code>.</li> <li>remove the id from your <code>src/ontology/oba-odk.yaml</code>, eg. <code>- id: go</code> from the list of <code>products</code> in the <code>import_group</code>.</li> <li>run update repo workflow</li> <li>delete the associated files manually:<ul> <li><code>src/imports/go_import.owl</code></li> <li><code>src/imports/go_terms.txt</code></li> </ul> </li> <li>Remove the respective entry from the <code>src/ontology/catalog-v001.xml</code> file.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#customise-an-import","title":"Customise an import","text":"<p>By default, an import module extracted from a source ontology will be a SLME module, see here. There are various options to change the default.</p> <p>The following change to your repo config (<code>src/ontology/oba-odk.yaml</code>) will switch the go import from an SLME module to a simple ROBOT filter module:</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: filter\n</code></pre> <p>A ROBOT filter module is, essentially, importing all external terms declared by your ontology (see here on how to declare external terms to be imported). Note that the <code>filter</code> module does  not consider terms/annotations from namespaces other than the base-namespace of the ontology itself. For example, in the example of GO above, only annotations / axioms related to the GO base IRI (http://purl.obolibrary.org/obo/GO_) would be considered. This  behaviour can be changed by adding additional base IRIs as follows:</p> <pre><code>import_group:\n  products:\n    - id: go\n      module_type: filter\n      base_iris:\n        - http://purl.obolibrary.org/obo/GO_\n        - http://purl.obolibrary.org/obo/CL_\n        - http://purl.obolibrary.org/obo/BFO\n</code></pre> <p>If you wish to customise your import entirely, you can specify your own ROBOT command to do so. To do that, add the following to your repo config (<code>src/ontology/oba-odk.yaml</code>):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: custom\n</code></pre> <p>Now add a new goal in your custom Makefile (<code>src/ontology/oba.Makefile</code>, not <code>src/ontology/Makefile</code>).</p> <pre><code>imports/go_import.owl: mirror/ro.owl imports/ro_terms_combined.txt\n    if [ $(IMP) = true ]; then $(ROBOT) query  -i $&lt; --update ../sparql/preprocess-module.ru \\\n        extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n        query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \\\n        annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl &amp;&amp; mv $@.tmp.owl $@; fi\n</code></pre> <p>Now feel free to change this goal to do whatever you wish it to do! It probably makes some sense (albeit not being a strict necessity), to leave most of the goal instead and replace only:</p> <pre><code>extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n</code></pre> <p>to another ROBOT pipeline.</p>"},{"location":"odk-workflows/RepoManagement/#add-a-component","title":"Add a component","text":"<p>A component is an import which belongs to your ontology, e.g. is managed by  you and your team. </p> <ol> <li>Open <code>src/ontology/oba-odk.yaml</code></li> <li>If you dont have it yet, add a new top level section <code>components</code></li> <li>Under the <code>components</code> section, add a new section called <code>products</code>.  This is where all your components are specified</li> <li>Under the <code>products</code> section, add a new component, e.g. <code>- filename: mycomp.owl</code></li> </ol> <p>Example</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n</code></pre> <p>When running <code>sh run.sh make update_repo</code>, a new file <code>src/ontology/components/mycomp.owl</code> will  be created which you can edit as you see fit. Typical ways to edit:</p> <ol> <li>Using a ROBOT template to generate the component (see below)</li> <li>Manually curating the component separately with Prot\u00e9g\u00e9 or any other editor</li> <li>Providing a <code>components/mycomp.owl:</code> make target in <code>src/ontology/oba.Makefile</code> and provide a custom command to generate the component<ul> <li><code>WARNING</code>: Note that the custom rule to generate the component MUST NOT depend on any other ODK-generated file such as seed files and the like (see issue).</li> </ul> </li> <li>Providing an additional attribute for the component in <code>src/ontology/oba-odk.yaml</code>, <code>source</code>, to specify that this component should simply be downloaded from somewhere on the web.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#adding-a-new-component-based-on-a-robot-template","title":"Adding a new component based on a ROBOT template","text":"<p>Since ODK 1.3.2, it is possible to simply link a ROBOT template to a component without having to specify any of the import logic. In order to add a new component that is connected to one or more template files, follow these steps:</p> <ol> <li>Open <code>src/ontology/oba-odk.yaml</code>.</li> <li>Make sure that <code>use_templates: TRUE</code> is set in the global project options. You should also make sure that <code>use_context: TRUE</code> is set in case you are using prefixes in your templates that are not known to <code>robot</code>, such as <code>OMOP:</code>, <code>CPONT:</code> and more. All non-standard prefixes you are using should be added to <code>config/context.json</code>.</li> <li>Add another component to the <code>products</code> section.</li> <li>To activate this component to be template-driven, simply say: <code>use_template: TRUE</code>. This will create an empty template for you in the templates directory, which will automatically be processed when recreating the component (e.g. <code>run.bat make recreate-mycomp</code>).</li> <li>If you want to use more than one component, use the <code>templates</code> field to add as many template names as you wish. ODK will look for them in the <code>src/templates</code> directory.</li> <li>Advanced: If you want to provide additional processing options, you can use the <code>template_options</code> field. This should be a string with option from robot template. One typical example for additional options you may want to provide is <code>--add-prefixes config/context.json</code> to ensure the prefix map of your context is provided to <code>robot</code>, see above.</li> </ol> <p>Example:</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n      use_template: TRUE\n      template_options: --add-prefixes config/context.json\n      templates:\n        - template1.tsv\n        - template2.tsv\n</code></pre> <p>Note: if your mirror is particularly large and complex, read this ODK recommendation.</p>"},{"location":"odk-workflows/RepositoryFileStructure/","title":"Repository structure","text":"<p>The main kinds of files in the repository:</p> <ol> <li>Release files</li> <li>Imports</li> <li>Components</li> </ol>"},{"location":"odk-workflows/RepositoryFileStructure/#release-files","title":"Release files","text":"<p>Release file are the file that are considered part of the official ontology release and to be used by the community. A detailed description of the release artefacts can be found here.</p>"},{"location":"odk-workflows/RepositoryFileStructure/#imports","title":"Imports","text":"<p>Imports are subsets of external ontologies that contain terms and axioms you would like to re-use in your ontology. These are considered \"external\", like dependencies in software development, and are not included in your \"base\" product, which is the release artefact which contains only those axioms that you personally maintain.</p> <p>These are the current imports in OBA</p> Import URL Type ro http://purl.obolibrary.org/obo/ro.owl slme chebi https://raw.githubusercontent.com/obophenotype/chebi_obo_slim/main/chebi_slim.owl slme goplus http://purl.obolibrary.org/obo/go/go-base.owl slme go http://purl.obolibrary.org/obo/go.owl slme pato http://purl.obolibrary.org/obo/pato.owl slme omo http://purl.obolibrary.org/obo/omo.owl slme hp http://purl.obolibrary.org/obo/hp.owl slme mondo http://purl.obolibrary.org/obo/mondo.owl slme ncbitaxon http://purl.obolibrary.org/obo/ncbitaxon/subsets/taxslim.owl slme uberon http://purl.obolibrary.org/obo/uberon.owl slme cl http://purl.obolibrary.org/obo/cl.owl slme nbo http://purl.obolibrary.org/obo/nbo.owl slme pr https://raw.githubusercontent.com/obophenotype/pro_obo_slim/master/pr_slim.owl slme so http://purl.obolibrary.org/obo/so.owl slme po http://purl.obolibrary.org/obo/po.owl slme bfo http://purl.obolibrary.org/obo/bfo.owl slme swisslipids http://purl.obolibrary.org/obo/swisslipids.owl slme lipidmaps http://purl.obolibrary.org/obo/lipidmaps.owl slme ncit https://raw.githubusercontent.com/ncit-obo-org/ncit-obo-edition/refs/heads/main/src/ontology/ncit-obo-slim.owl slme obi http://purl.obolibrary.org/obo/obi.owl slme ## Components Components, in contrast to imports, are considered full members of the ontology. This means that any axiom in a component is also included in the ontology base - which means it is considered native to the ontology. While this sounds complicated, consider this: conceptually, no component should be part of more than one ontology. If that seems to be the case, we are most likely talking about an import. Components are often not needed for ontologies, but there are some use cases: <ol> <li>There is an automated process that generates and re-generates a part of the ontology</li> <li>A part of the ontology is managed in ROBOT templates</li> <li>The expressivity of the component is higher than the format of the edit file. For example, people still choose to manage their ontology in OBO format (they should not) missing out on a lot of owl features. They may choose to manage logic that is beyond OBO in a specific OWL component.</li> </ol> <p>These are the components in OBA</p> Filename URL obsoletes.owl None synonyms.owl None"},{"location":"odk-workflows/SettingUpDockerForODK/","title":"Setting up your Docker environment for ODK use","text":"<p>One of the most frequent problems with running the ODK for the first time is failure because of lack of memory. This can look like a Java OutOfMemory exception,  but more often than not it will appear as something like an <code>Error 137</code>. There are two places you need to consider to set your memory:</p> <ol> <li>Your src/ontology/run.sh (or run.bat) file. You can set the memory in there by adding  <code>robot_java_args: '-Xmx8G'</code> to your src/ontology/oba-odk.yaml file, see for example here.</li> <li>Set your docker memory. By default, it should be about 10-20% more than your <code>robot_java_args</code> variable. You can manage your memory settings by right-clicking on the docker whale in your system bar--&gt;Preferences--&gt;Resources--&gt;Advanced, see picture below.</li> </ol> <p></p>"},{"location":"odk-workflows/UpdateImports/","title":"Update Imports Workflow","text":"<p>This page discusses how to update the contents of your imports, like adding or removing terms. If you are looking to customise imports, like changing the module type, see here.</p>"},{"location":"odk-workflows/UpdateImports/#importing-a-new-term","title":"Importing a new term","text":"<p>Note: some ontologies now use a merged-import system to manage dynamic imports, for these please follow instructions in the section title \"Using the Base Module approach\".</p> <p>Importing a new term is split into two sub-phases:</p> <ol> <li>Declaring the terms to be imported</li> <li>Refreshing imports dynamically</li> </ol>"},{"location":"odk-workflows/UpdateImports/#declaring-terms-to-be-imported","title":"Declaring terms to be imported","text":"<p>There are three ways to declare terms that are to be imported from an external ontology. Choose the appropriate one for your particular scenario (all three can be used in parallel if need be):</p> <ol> <li>Prot\u00e9g\u00e9-based declaration</li> <li>Using term files</li> <li>Using the custom import template</li> </ol>"},{"location":"odk-workflows/UpdateImports/#protege-based-declaration","title":"Prot\u00e9g\u00e9-based declaration","text":"<p>This workflow is to be avoided, but may be appropriate if the editor does not have access to the ODK docker container.  This approach also applies to ontologies that use base module import approach.</p> <ol> <li>Open your ontology (edit file) in Prot\u00e9g\u00e9 (5.5+).</li> <li>Select 'owl:Thing'</li> <li>Add a new class as usual.</li> <li>Paste the full iri in the 'Name:' field, for example, http://purl.obolibrary.org/obo/CHEBI_50906.</li> <li>Click 'OK'</li> </ol> <p></p> <p>Now you can use this term for example to construct logical definitions. The next time the imports are refreshed (see how to refresh here), the metadata (labels, definitions, etc.) for this term are imported from the respective external source ontology and becomes visible in your ontology.</p>"},{"location":"odk-workflows/UpdateImports/#using-term-files","title":"Using term files","text":"<p>Every import has, by default a term file associated with it, which can be found in the imports directory. For example, if you have a GO import in <code>src/ontology/go_import.owl</code>, you will also have an associated term file <code>src/ontology/go_terms.txt</code>. You can add terms in there simply as a list:</p> <pre><code>GO:0008150\nGO:0008151\n</code></pre> <p>Now you can run the refresh imports workflow) and the two terms will be imported.</p>"},{"location":"odk-workflows/UpdateImports/#using-the-custom-import-template","title":"Using the custom import template","text":"<p>This workflow is appropriate if:</p> <ol> <li>You prefer to manage all your imported terms in a single file (rather than multiple files like in the \"Using term files\" workflow above).</li> <li>You wish to augment your imported ontologies with additional information. This requires a cautionary discussion.</li> </ol> <p>To enable this workflow, you add the following to your ODK config file (<code>src/ontology/oba-odk.yaml</code>), and update the repository:</p> <pre><code>use_custom_import_module: TRUE\n</code></pre> <p>Now you can manage your imported terms directly in the custom external terms template, which is located at <code>src/templates/external_import.owl</code>. Note that this file is a ROBOT template, and can, in principle, be extended to include any axioms you like. Before extending the template, however, read the following carefully.</p> <p>The main purpose of the custom import template is to enable the management off all terms to be imported in a centralised place. To enable that, you do not have to do anything other than maintaining the template. So if you, say currently import <code>APOLLO_SV:00000480</code>, and you wish to import <code>APOLLO_SV:00000532</code>, you simply add a row like this:</p> <pre><code>ID  Entity Type\nID  TYPE\nAPOLLO_SV:00000480  owl:Class\nAPOLLO_SV:00000532  owl:Class\n</code></pre> <p>When the imports are refreshed see imports refresh workflow, the term(s) will simply be imported from the configured ontologies.</p> <p>Now, if you wish to extend the Makefile (which is beyond these instructions) and add, say, synonyms to the imported terms, you can do that, but you need to (a) preserve the <code>ID</code> and <code>ENTITY</code> columns and (b) ensure that the ROBOT template is valid otherwise, see here.</p> <p>WARNING. Note that doing this is a widespread antipattern (see related issue). You should not change the axioms of terms that do not belong into your ontology unless necessary - such changes should always be pushed into the ontology where they belong. However, since people are doing it, whether the OBO Foundry likes it or not, at least using the custom imports module as described here localises the changes to a single simple template and ensures that none of the annotations added this way are merged into the base file.  </p>"},{"location":"odk-workflows/UpdateImports/#refresh-imports","title":"Refresh imports","text":"<p>If you want to refresh the import yourself (this may be necessary to pass the travis tests), and you have the ODK installed, you can do the following (using go as an example):</p> <p>First, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). </p> <pre><code>cd src/ontology\n</code></pre> <p>Then, you regenerate the import that will now include any new terms you have added. Note: You must have docker installed.</p> <pre><code>sh run.sh make PAT=false imports/go_import.owl -B\n</code></pre> <p>Since ODK 1.2.27, it is also possible to simply run the following, which is the same as the above:</p> <pre><code>sh run.sh make refresh-go\n</code></pre> <p>Note that in case you changed the defaults, you need to add <code>IMP=true</code> and/or <code>MIR=true</code> to the command below:</p> <pre><code>sh run.sh make IMP=true MIR=true PAT=false imports/go_import.owl -B\n</code></pre> <p>If you wish to skip refreshing the mirror, i.e. skip downloading the latest version of the source ontology for your import (e.g. <code>go.owl</code> for your go import) you can set <code>MIR=false</code> instead, which will do the exact same thing as the above, but is easier to remember:</p> <pre><code>sh run.sh make IMP=true MIR=false PAT=false imports/go_import.owl -B\n</code></pre>"},{"location":"odk-workflows/UpdateImports/#using-the-base-module-approach","title":"Using the Base Module approach","text":"<p>Since ODK 1.2.31, we support an entirely new approach to generate modules: Using base files. The idea is to only import axioms from ontologies that actually belong to it.  A base file is a subset of the ontology that only contains those axioms that nominally  belong there. In other words, the base file does not contain any axioms that belong to another ontology. An example would be this:</p> <p>Imagine this being the full Uberon ontology:</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\nAxiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>The base file is the set of all axioms that are about UBERON terms:</p> <pre><code>Axiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>I.e.</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\n</code></pre> <p>Gets removed.</p> <p>The base file pipeline is a bit more complex than the normal pipelines, because of the logical interactions between the imported ontologies. This is solved by _first  merging all mirrors into one huge file and then extracting one mega module from it.</p> <p>Example: Let's say we are importing terms from Uberon, GO and RO in our ontologies. When we use the base pipelines, we</p> <p>1) First obtain the base (usually by simply downloading it, but there is also an option now to create it with ROBOT) 2) We merge all base files into one big pile 3) Then we extract a single module <code>imports/merged_import.owl</code></p> <p>The first implementation of this pipeline is PATO, see https://github.com/pato-ontology/pato/blob/master/src/ontology/pato-odk.yaml.</p> <p>To check if your ontology uses this method, check src/ontology/oba-odk.yaml to see if <code>use_base_merging: TRUE</code> is declared under <code>import_group</code></p> <p>If your ontology uses Base Module approach, please use the following steps: </p> <p>First, add the term to be imported to the term file associated with it (see above \"Using term files\" section if this is not clear to you)</p> <p>Next, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). </p> <pre><code>cd src/ontology\n</code></pre> <p>Then refresh imports by running</p> <pre><code>sh run.sh make imports/merged_import.owl\n</code></pre> <p>Note: if your mirrors are updated, you can run <code>sh run.sh make no-mirror-refresh-merged</code></p> <p>This requires quite a bit of memory on your local machine, so if you encounter an error, it might be a lack of memory on your computer. A solution would be to create a ticket in an issue tracker requesting for the term to be imported, and one of the local devs should pick this up and run the import for you.</p> <p>Lastly, restart Prot\u00e9g\u00e9, and the term should be imported in ready to be used.</p>"},{"location":"odk-workflows/components/","title":"Adding components to an ODK repo","text":"<p>For details on what components are, please see component section of repository file structure document.</p> <p>To add custom components to an ODK repo, please follow the following steps:</p> <p>1) Locate your odk yaml file and open it with your favourite text editor (src/ontology/oba-odk.yaml) 2) Search if there is already a component section to the yaml file, if not add it accordingly, adding the name of your component:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n</code></pre> <p>3) Refresh your repo by running <code>sh run update_repo</code>. This will automatically (1) create a new file in <code>src/ontology/components/</code>, (2) update the <code>-edit</code> file so that it imports <code>http://purl.obolibrary.org/obo/oba/components/your-component-name.owl</code> (the IRI of your new component), and (3) update the XML catalog file (<code>src/ontology/catalog-v001.xml</code>) to redirect that IRI to the file in the <code>src/ontology/components</code> directory, so that the new component can be found by tools such as Prot\u00e9g\u00e9 or ROBOT, when they load the <code>-edit</code> file.</p> <p>If your component is to be generated by some automated process, add a goal in your custom Makefile (<code>src/ontology/oba.Makefile</code>) and make it perform any task needed to generate the component:</p> <pre><code>$(COMPONENTSDIR)/your-component-name.owl: $(SRC)\n    &lt;Insert here the code to produce the component&gt;\n</code></pre> <p>If the component is to be generated from a ROBOT template, the ODK can generate the appropriate code for you. For that, when adding the component fo the ODK configuration file (step 2 above), explicitly indicate that the component should be derived from template(s) and list the source templates:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      use_template: true\n      templates:\n        - template1.tsv\n        - template2.tsv\n</code></pre> <p>In this example, the component will be derived from the templates found in <code>src/templates/template1.tsv</code> and <code>src/templates/template2.tsv</code>. Initial empty templates will automatically be generated when the repository is refreshed (step 3).</p> <p>Likewise, the ODK can generate the required code for the case where the component is to be derived from SSSOM mappings:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      use_mappings: true\n      mappings:\n        - my-mappings.sssom.tsv\n</code></pre> <p>and for the case where the component is to be fetched from a remote resource:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n      source: https://example.org/component-source.owl\n</code></pre>"}]}